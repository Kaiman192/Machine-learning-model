import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Função para gerar dados sintéticos
def generate_synthetic_data(n=1000):
    np.random.seed(42)
    
    age = np.random.randint(18, 65, size=n)
    sex = np.random.choice(['male', 'female'], size=n)
    bmi = np.random.normal(30, 6, size=n)
    children = np.random.randint(0, 5, size=n)
    smoker = np.random.choice(['yes', 'no'], size=n, p=[0.2, 0.8])
    region = np.random.choice(['northwest', 'northeast', 'southwest', 'southeast'], size=n)
    charges = age * 200 + (bmi * 150) + (children * 500) + (smoker == 'yes') * 12000 + np.random.normal(0, 3000, size=n)
    
    data = pd.DataFrame({
        'age': age,
        'sex': sex,
        'bmi': bmi,
        'children': children,
        'smoker': smoker,
        'region': region,
        'charges': charges
    })
    
    return data

# Geração de dados sintéticos
data = generate_synthetic_data()

# Análise Exploratória de Dados (EDA)

# 1. Visualizando a distribuição de variáveis
print("Pairplot das variáveis com base no status de fumante:")
plt.figure(figsize=(10, 6))
sns.pairplot(data, hue='smoker', palette='Set1')
plt.suptitle('Distribuição das Variáveis por Status de Fumante', y=1.02)
plt.show()

# 2. Matriz de correlação com variáveis numéricas convertidas
print("Matriz de correlação entre as variáveis:")
data_numeric = pd.get_dummies(data, drop_first=True)
plt.figure(figsize=(10, 8))
corr_matrix = data_numeric.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Matriz de Correlação', fontsize=16)
plt.show()

# Teste de Hipóteses

# 3. Teste t: fumantes vs não fumantes
print("Teste de Hipótese - Fumantes vs Não Fumantes")
smokers = data[data['smoker'] == 'yes']['charges']
non_smokers = data[data['smoker'] == 'no']['charges']

t_stat, p_value = stats.ttest_ind(smokers, non_smokers)
print(f'Teste t para fumantes vs não fumantes: t={t_stat:.3f}, p={p_value:.3f}')

# Gráfico de distribuição de fumantes vs não fumantes
plt.figure(figsize=(8, 6))
sns.boxplot(x='smoker', y='charges', data=data, palette='Set2')
plt.title('Comparação de Encargos entre Fumantes e Não Fumantes', fontsize=14)
plt.xlabel('Fumante')
plt.ylabel('Encargos')
plt.show()

# 4. Teste t: homens vs mulheres
print("\nTeste de Hipótese - Homens vs Mulheres")
men = data[data['sex'] == 'male']['charges']
women = data[data['sex'] == 'female']['charges']

t_stat, p_value = stats.ttest_ind(men, women)
print(f'Teste t para homens vs mulheres: t={t_stat:.3f}, p={p_value:.3f}')

# Gráfico de distribuição de homens vs mulheres
plt.figure(figsize=(8, 6))
sns.boxplot(x='sex', y='charges', data=data, palette='Set3')
plt.title('Comparação de Encargos entre Homens e Mulheres', fontsize=14)
plt.xlabel('Sexo')
plt.ylabel('Encargos')
plt.show()

# Regressão Linear

# 5. Preparação dos dados para o modelo de regressão linear
print("\nModelagem de Regressão Linear")
X = pd.get_dummies(data.drop('charges', axis=1), drop_first=True)
y = data['charges']

# Divisão entre dados de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Treinamento do modelo de regressão linear
model = LinearRegression()
model.fit(X_train, y_train)

# Avaliação do modelo
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error (Erro Quadrático Médio): {mse:.2f}')

# Gráfico de dispersão dos resultados reais vs preditos
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)
plt.title('Previsão de Encargos de Seguro vs Valores Reais', fontsize=14)
plt.xlabel('Encargos Reais')
plt.ylabel('Encargos Preditos')
plt.grid(True)
plt.show()
